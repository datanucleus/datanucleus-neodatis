################################################################################
# Copyright (c) 2008 Andy Jefferson and others. All rights reserved.
# This program and the accompanying materials are made available under
# the terms of the DataNucleus License v1.0 which accompanies this distribution.
#
# Contributions :
#
# Resources for org.datanucleus.store.neodatis package (Spanish)
################################################################################

NeoDatis.URLInvalid=El URL ("{0}") dado a NeoDatisManager no es corecta. Debe ser "neodatis:hostname:port" (servidor) a "neodatis:file:filename" (archivo local).

NeoDatis.Server=NeoDatis servidor : {0} en puerta {1} - DB40 versión {2}
NeoDatis.Filestore=NeoDatis archivo local : {0} - NeoDatis versión {1}
NeoDatis.FilestoreRelativePath=Interpretando NeoDatis archivo local de "{0}" como "{1}"

NeoDatis.FilenameError=Error en la interpretación del archivo "{0}" - {1}

NeoDatis.OpeningConnection=Abriendo una connección a NeoDatis en "{0}" : {1}
NeoDatis.CommittingConnection=Cometiendo una connección a NeoDatis en "{0}" : {1}
NeoDatis.RollingBackConnection=Rolling back una connección a NeoDatis en "{0}" : {1}
NeoDatis.ClosingConnection=Cerrando una connección a NeoDatis en "{0}" : {1}
NeoDatis.ConnectionError=No podriamos conectar a NeoDatis en {0}

#
# Operations
#
NeoDatis.Insert.Start=Objeto "{0}" va a estar puesto en NeoDatis con todos los objetos alcanzables
NeoDatis.Insert.ObjectPersisted=Objeto "{0}" (id="{1}) almacenado por NeoDatis
NeoDatis.Insert.ObjectPersistedWithVersion=Objeto "{0}" (id="{1}) almacenado por NeoDatis con versión "{2}"
NeoDatis.Insert.ObjectPersistFailed=¡Objeto "{0}" no ha sido almacenado correctamente por NeoDatis!
NeoDatis.Insert.ObjectWithIdAlreadyExists=¡Objeto "{0}" tiene id "{1}" pero otro objeto con la misma identidad existe en la base de datos!
NeoDatis.Update.Start=Objeto "{0}" (id="{1}") va a ser cambiado en NeoDatis (para campos "{2}") con todos los objetos alcanzables
NeoDatis.Delete.Start=Objeto "{0}" (id="{1}") va a ser borrado de NeoDatis con todos los objetos dependientes
NeoDatis.Delete.ObjectDeleted=Objeto "{0}" (id="{1}") ha sido borrado
NeoDatis.Fetch.Start=Objeto "{0}" (id="{1}") va a ser obtenido de NeoDatis
NeoDatis.ExecutionTime=Tiempo de ejecución = {0} ms

NeoDatis.MultipleObjectsFoundForId=Hay mas que un objeto devuelto buscando el objeto de tipo "{0}" con identidad "{1}" ! Debe ser imposible
NeoDatis.AddClass.ClassInvalidError=La clase/interface referido {0} no es persistence-capable !

NeoDatis.Object.NotFound=Objeto "{0}" (id="{1}") no existe en la base de datos
NeoDatis.Object.NotActive=El objeto "{0}" no es activo. Tienes que activarlo (por NeoDatis) antes de usarlo
NeoDatis.Object.Activating=El objeto "{0}" va a ser activado en NeoDatis
NeoDatis.Object.Refreshing=El objeto "{0}" va a ser refrescado en NeoDatis
NeoDatis.Object.Deactivating=El objeto "{0}" va a ser deactivado en NeoDatis

NeoDatis.Extent.IteratorRemoveNotSupported=El metodo Extent.iterator().remove() no esta apoyado. Usted tiene que borrar los objetos por deletePersistent()
NeoDatis.Extent.Execute=Extent va a ser obtenido por la clase "{0}" con subclasses="{1}"

#
# Query
#
NeoDatis.Native.NeedsPredicate=NeoDatis Native queries necesitan una instancia de "NativeQuery"
NeoDatis.Criteria.NeedsPredicate=NeoDatis Criteria queries necesitan una instancia de "CriteriaQuery"
NeoDatis.Criteria=NeoDatis Criteria : {0}

